// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for CustomizationsPartitioningMode.
const (
	AutoLvm CustomizationsPartitioningMode = "auto-lvm"
	Lvm     CustomizationsPartitioningMode = "lvm"
	Raw     CustomizationsPartitioningMode = "raw"
)

// Defines values for DistributionProfileItem.
const (
	XccdfOrgSsgprojectContentProfileAnssiBp28Enhanced     DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_enhanced"
	XccdfOrgSsgprojectContentProfileAnssiBp28High         DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_high"
	XccdfOrgSsgprojectContentProfileAnssiBp28Intermediary DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_intermediary"
	XccdfOrgSsgprojectContentProfileAnssiBp28Minimal      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_anssi_bp28_minimal"
	XccdfOrgSsgprojectContentProfileCis                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis"
	XccdfOrgSsgprojectContentProfileCisServerL1           DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_server_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL1      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l1"
	XccdfOrgSsgprojectContentProfileCisWorkstationL2      DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cis_workstation_l2"
	XccdfOrgSsgprojectContentProfileCui                   DistributionProfileItem = "xccdf_org.ssgproject.content_profile_cui"
	XccdfOrgSsgprojectContentProfileE8                    DistributionProfileItem = "xccdf_org.ssgproject.content_profile_e8"
	XccdfOrgSsgprojectContentProfileHipaa                 DistributionProfileItem = "xccdf_org.ssgproject.content_profile_hipaa"
	XccdfOrgSsgprojectContentProfileIsmO                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ism_o"
	XccdfOrgSsgprojectContentProfileOspp                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_ospp"
	XccdfOrgSsgprojectContentProfilePciDss                DistributionProfileItem = "xccdf_org.ssgproject.content_profile_pci-dss"
	XccdfOrgSsgprojectContentProfileStandard              DistributionProfileItem = "xccdf_org.ssgproject.content_profile_standard"
	XccdfOrgSsgprojectContentProfileStig                  DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig"
	XccdfOrgSsgprojectContentProfileStigGui               DistributionProfileItem = "xccdf_org.ssgproject.content_profile_stig_gui"
)

// Defines values for Distributions.
const (
	Centos8      Distributions = "centos-8"
	Centos9      Distributions = "centos-9"
	Fedora37     Distributions = "fedora-37"
	Fedora38     Distributions = "fedora-38"
	Fedora39     Distributions = "fedora-39"
	Fedora40     Distributions = "fedora-40"
	Rhel8        Distributions = "rhel-8"
	Rhel84       Distributions = "rhel-84"
	Rhel85       Distributions = "rhel-85"
	Rhel86       Distributions = "rhel-86"
	Rhel87       Distributions = "rhel-87"
	Rhel88       Distributions = "rhel-88"
	Rhel8Nightly Distributions = "rhel-8-nightly"
	Rhel9        Distributions = "rhel-9"
	Rhel90       Distributions = "rhel-90"
	Rhel91       Distributions = "rhel-91"
	Rhel92       Distributions = "rhel-92"
	Rhel9Nightly Distributions = "rhel-9-nightly"
)

// Defines values for ImageRequestArchitecture.
const (
	ImageRequestArchitectureAarch64 ImageRequestArchitecture = "aarch64"
	ImageRequestArchitectureX8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesOci               ImageTypes = "oci"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
	ImageTypesVsphereOva        ImageTypes = "vsphere-ova"
	ImageTypesWsl               ImageTypes = "wsl"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws              UploadTypes = "aws"
	UploadTypesAwsS3            UploadTypes = "aws.s3"
	UploadTypesAzure            UploadTypes = "azure"
	UploadTypesGcp              UploadTypes = "gcp"
	UploadTypesOciObjectstorage UploadTypes = "oci.objectstorage"
)

// Defines values for GetPackagesParamsArchitecture.
const (
	GetPackagesParamsArchitectureAarch64 GetPackagesParamsArchitecture = "aarch64"
	GetPackagesParamsArchitectureX8664   GetPackagesParamsArchitecture = "x86_64"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// Region A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// ShareWithAccounts An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Repositories Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// ImageName Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// ResourceGroup Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// SourceId ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// SubscriptionId ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// TenantId ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest struct {
	union json.RawMessage
}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	// ComposeId UUID of the parent compose of the clone
	ComposeId openapi_types.UUID `json:"compose_id"`
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   CloneRequest       `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// OstreeCommit ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Packages Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`

	// Distribution List of all distributions that image builder supports. A user might not have access to
	// restricted distributions.
	//
	// Restricted distributions include the RHEL nightlies and the Fedora distributions.
	Distribution     Distributions `json:"distribution"`
	ImageDescription *string       `json:"image_description,omitempty"`
	ImageName        *string       `json:"image_name,omitempty"`

	// ImageRequests Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   ComposeRequest     `json:"request"`
}

// CustomRepository Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// Gpgkey GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem         *[]Filesystem       `json:"filesystem,omitempty"`
	Openscap           *OpenSCAP           `json:"openscap,omitempty"`
	Packages           *[]string           `json:"packages,omitempty"`

	// PartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
	// there are one or more mountpoints in which case it will use LVM. 'lvm' always
	// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
	// even when there are one or more mountpoints.
	PartitioningMode    *CustomizationsPartitioningMode `json:"partitioning_mode,omitempty"`
	PayloadRepositories *[]Repository                   `json:"payload_repositories,omitempty"`
	Subscription        *Subscription                   `json:"subscription,omitempty"`

	// Users list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// CustomizationsPartitioningMode Select how the disk image will be partitioned. 'auto-lvm' will use raw unless
// there are one or more mountpoints in which case it will use LVM. 'lvm' always
// uses LVM, even when there are no extra mountpoints. 'raw' uses raw partitions
// even when there are one or more mountpoints.
type CustomizationsPartitioningMode string

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DistributionProfileItem defines model for DistributionProfileItem.
type DistributionProfileItem string

// DistributionProfileResponse List of profiles for a given distribution
type DistributionProfileResponse = []DistributionProfileItem

// Distributions List of all distributions that image builder supports. A user might not have access to
// restricted distributions.
//
// Restricted distributions include the RHEL nightlies and the Fedora distributions.
type Distributions string

// DistributionsResponse List of distributions this user is allowed to build.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// MinSize size of the filesystem in bytes
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// ShareWithAccounts List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// Architecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture ImageRequestArchitecture `json:"architecture"`
	ImageType    ImageTypes               `json:"image_type"`
	Ostree       *OSTree                  `json:"ostree,omitempty"`

	// Size Size of image, in bytes. When set to 0 the image size is a minimum
	// defined by the image type.
	Size          *uint64       `json:"size,omitempty"`
	UploadRequest UploadRequest `json:"upload_request"`
}

// ImageRequestArchitecture CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OCIUploadRequestOptions defines model for OCIUploadRequestOptions.
type OCIUploadRequestOptions = map[string]interface{}

// OCIUploadStatus defines model for OCIUploadStatus.
type OCIUploadStatus struct {
	Url string `json:"url"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// Contenturl A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Parent Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Rhsm Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// OpenSCAP defines model for OpenSCAP.
type OpenSCAP struct {
	ProfileId string `json:"profile_id"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// CheckRepoGpg Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Rhc Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options UploadRequest_Options `json:"options"`
	Type    UploadTypes           `json:"type"`
}

// UploadRequest_Options defines model for UploadRequest.Options.
type UploadRequest_Options struct {
	union json.RawMessage
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options UploadStatus_Options `json:"options"`
	Status  UploadStatusStatus   `json:"status"`
	Type    UploadTypes          `json:"type"`
}

// UploadStatus_Options defines model for UploadStatus.Options.
type UploadStatus_Options struct {
	union json.RawMessage
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// Limit Max amount of composes.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Composes page offset.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// IgnoreImageTypes Filter the composes on image type. The filter is optional and can be specified multiple times.
	IgnoreImageTypes *[]ImageTypes `form:"ignoreImageTypes,omitempty" json:"ignoreImageTypes,omitempty"`
}

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// Limit max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// Distribution distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// Architecture architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// Search packages to look for
	Search string `form:"search" json:"search"`

	// Limit max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeRequest

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneRequest

// AsAWSEC2Clone returns the union data inside the CloneRequest as a AWSEC2Clone
func (t CloneRequest) AsAWSEC2Clone() (AWSEC2Clone, error) {
	var body AWSEC2Clone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSEC2Clone overwrites any union data inside the CloneRequest as the provided AWSEC2Clone
func (t *CloneRequest) FromAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSEC2Clone performs a merge with any union data inside the CloneRequest, using the provided AWSEC2Clone
func (t *CloneRequest) MergeAWSEC2Clone(v AWSEC2Clone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t CloneRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CloneRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSUploadRequestOptions
func (t UploadRequest_Options) AsAWSUploadRequestOptions() (AWSUploadRequestOptions, error) {
	var body AWSUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) FromAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSUploadRequestOptions
func (t *UploadRequest_Options) MergeAWSUploadRequestOptions(v AWSUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadRequestOptions returns the union data inside the UploadRequest_Options as a AWSS3UploadRequestOptions
func (t UploadRequest_Options) AsAWSS3UploadRequestOptions() (AWSS3UploadRequestOptions, error) {
	var body AWSS3UploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) FromAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AWSS3UploadRequestOptions
func (t *UploadRequest_Options) MergeAWSS3UploadRequestOptions(v AWSS3UploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadRequestOptions returns the union data inside the UploadRequest_Options as a GCPUploadRequestOptions
func (t UploadRequest_Options) AsGCPUploadRequestOptions() (GCPUploadRequestOptions, error) {
	var body GCPUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) FromGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided GCPUploadRequestOptions
func (t *UploadRequest_Options) MergeGCPUploadRequestOptions(v GCPUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadRequestOptions returns the union data inside the UploadRequest_Options as a AzureUploadRequestOptions
func (t UploadRequest_Options) AsAzureUploadRequestOptions() (AzureUploadRequestOptions, error) {
	var body AzureUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) FromAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided AzureUploadRequestOptions
func (t *UploadRequest_Options) MergeAzureUploadRequestOptions(v AzureUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadRequestOptions returns the union data inside the UploadRequest_Options as a OCIUploadRequestOptions
func (t UploadRequest_Options) AsOCIUploadRequestOptions() (OCIUploadRequestOptions, error) {
	var body OCIUploadRequestOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadRequestOptions overwrites any union data inside the UploadRequest_Options as the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) FromOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadRequestOptions performs a merge with any union data inside the UploadRequest_Options, using the provided OCIUploadRequestOptions
func (t *UploadRequest_Options) MergeOCIUploadRequestOptions(v OCIUploadRequestOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadRequest_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadRequest_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAWSUploadStatus returns the union data inside the UploadStatus_Options as a AWSUploadStatus
func (t UploadStatus_Options) AsAWSUploadStatus() (AWSUploadStatus, error) {
	var body AWSUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSUploadStatus
func (t *UploadStatus_Options) FromAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSUploadStatus
func (t *UploadStatus_Options) MergeAWSUploadStatus(v AWSUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAWSS3UploadStatus returns the union data inside the UploadStatus_Options as a AWSS3UploadStatus
func (t UploadStatus_Options) AsAWSS3UploadStatus() (AWSS3UploadStatus, error) {
	var body AWSS3UploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAWSS3UploadStatus overwrites any union data inside the UploadStatus_Options as the provided AWSS3UploadStatus
func (t *UploadStatus_Options) FromAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAWSS3UploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AWSS3UploadStatus
func (t *UploadStatus_Options) MergeAWSS3UploadStatus(v AWSS3UploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsGCPUploadStatus returns the union data inside the UploadStatus_Options as a GCPUploadStatus
func (t UploadStatus_Options) AsGCPUploadStatus() (GCPUploadStatus, error) {
	var body GCPUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGCPUploadStatus overwrites any union data inside the UploadStatus_Options as the provided GCPUploadStatus
func (t *UploadStatus_Options) FromGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGCPUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided GCPUploadStatus
func (t *UploadStatus_Options) MergeGCPUploadStatus(v GCPUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAzureUploadStatus returns the union data inside the UploadStatus_Options as a AzureUploadStatus
func (t UploadStatus_Options) AsAzureUploadStatus() (AzureUploadStatus, error) {
	var body AzureUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAzureUploadStatus overwrites any union data inside the UploadStatus_Options as the provided AzureUploadStatus
func (t *UploadStatus_Options) FromAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAzureUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided AzureUploadStatus
func (t *UploadStatus_Options) MergeAzureUploadStatus(v AzureUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsOCIUploadStatus returns the union data inside the UploadStatus_Options as a OCIUploadStatus
func (t UploadStatus_Options) AsOCIUploadStatus() (OCIUploadStatus, error) {
	var body OCIUploadStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOCIUploadStatus overwrites any union data inside the UploadStatus_Options as the provided OCIUploadStatus
func (t *UploadStatus_Options) FromOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOCIUploadStatus performs a merge with any union data inside the UploadStatus_Options, using the provided OCIUploadStatus
func (t *UploadStatus_Options) MergeOCIUploadStatus(v OCIUploadStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UploadStatus_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UploadStatus_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get architectures for distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution Distributions) error
	// get clone status
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get composes
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get compose status
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get compose clones
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get compose metadata
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get spec
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error
	// get the available profiles for a given distribution. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/profiles)
	GetOscapProfiles(ctx echo.Context, distribution Distributions) error
	// get the customizations for a given distribution and profile. This is a temporary endpoint meant to be removed soon.
	// (GET /oscap/{distribution}/{profile}/customizations)
	GetOscapCustomizations(ctx echo.Context, distribution Distributions, profile DistributionProfileItem) error
	// get packages
	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "ignoreImageTypes" -------------

	err = runtime.BindQueryParameter("form", true, false, "ignoreImageTypes", ctx.QueryParams(), &params.IgnoreImageTypes)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ignoreImageTypes: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetOscapProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapProfiles(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapProfiles(ctx, distribution)
	return err
}

// GetOscapCustomizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOscapCustomizations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution Distributions

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Path parameter "profile" -------------
	var profile DistributionProfileItem

	err = runtime.BindStyledParameterWithLocation("simple", false, "profile", runtime.ParamLocationPath, ctx.Param("profile"), &profile)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter profile: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOscapCustomizations(ctx, distribution, profile)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/oscap/:distribution/profiles", wrapper.GetOscapProfiles)
	router.GET(baseURL+"/oscap/:distribution/:profile/customizations", wrapper.GetOscapCustomizations)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/xv3vXN2cwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
